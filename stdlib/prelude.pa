use @io std/io

intrinsic_type Int

intrinsic_def Int .add Int -> Int
intrinsic_def Int .multiply  Int -> Int
intrinsic_def Int .subtract Int -> Int
intrinsic_def Int .divide Int -> Int
intrinsic_def Int .mod Int -> Int

intrinsic_type Float

intrinsic_def Float .add Float -> Float
intrinsic_def Float .multiply  Float -> Float
intrinsic_def Float .subtract Float -> Float
intrinsic_def Float .divide Float -> Float
intrinsic_def Float .mod Float -> Float

intrinsic_type String

intrinsic_def String .concat String -> String

intrinsic_type Regex

intrinsic_def exit Int -> ()

trait Any

enum Bool
  | True
  | False

enum Maybe<A> where A :: Any
  | Some A
  | None

enum Result<A, B> where A :: Any, B :: Any
  | Ok A
  | Err B

intrinsic_type Never

trait BlockHandle<A> where A :: Any
  | return A -> Never

trait AsString
  | toString -> String

def print T -> T where T :: AsString {
  val =>
    @io out "$(val | toString)\n"
    val
}

def T | print -> T where T :: AsString {
  val => print val
}