---
source: pluma_parser/tests/parse_success.rs
expression: "def hello { (A, B) -> C } {\n  |x| x\n}"
---

=== Source ===
def hello { (A, B) -> C } {
  |x| x
}

=== Comments ===
{}

=== AST ===
Module(0, 37) [
    TopLevelStatementNode {
        pos: (
            0,
            37,
        ),
        kind: Def(
            DefNode {
                pos: (
                    0,
                    37,
                ),
                visibility: Public,
                kind: Function {
                    signature: [
                        (
                            Ident(4, 9) "hello",
                            TypeExprNode {
                                pos: (
                                    10,
                                    25,
                                ),
                                kind: Func(
                                    TypeExprNode {
                                        pos: (
                                            12,
                                            18,
                                        ),
                                        kind: UnlabeledTuple(
                                            [
                                                TypeExprNode {
                                                    pos: (
                                                        13,
                                                        14,
                                                    ),
                                                    kind: Single(
                                                        TypeIdentifierNode {
                                                            pos: (
                                                                13,
                                                                14,
                                                            ),
                                                            name: "A",
                                                            generics: [],
                                                            constraints: None,
                                                        },
                                                    ),
                                                    typ: Unknown,
                                                },
                                                TypeExprNode {
                                                    pos: (
                                                        16,
                                                        17,
                                                    ),
                                                    kind: Single(
                                                        TypeIdentifierNode {
                                                            pos: (
                                                                16,
                                                                17,
                                                            ),
                                                            name: "B",
                                                            generics: [],
                                                            constraints: None,
                                                        },
                                                    ),
                                                    typ: Unknown,
                                                },
                                            ],
                                        ),
                                        typ: Unknown,
                                    },
                                    TypeExprNode {
                                        pos: (
                                            22,
                                            23,
                                        ),
                                        kind: Single(
                                            TypeIdentifierNode {
                                                pos: (
                                                    22,
                                                    23,
                                                ),
                                                name: "C",
                                                generics: [],
                                                constraints: None,
                                            },
                                        ),
                                        typ: Unknown,
                                    },
                                ),
                                typ: Unknown,
                            },
                        ),
                    ],
                },
                return_type: None,
                generic_type_constraints: [],
                block: BlockNode {
                    pos: (
                        26,
                        37,
                    ),
                    params: [
                        PatternNode {
                            pos: (
                                31,
                                32,
                            ),
                            kind: Identifier(
                                Ident(31, 32) "x",
                                false,
                            ),
                        },
                    ],
                    body: [
                        StatementNode {
                            pos: (
                                34,
                                35,
                            ),
                            kind: Expr(
                                ExprNode {
                                    pos: (
                                        34,
                                        35,
                                    ),
                                    kind: Identifier {
                                        ident: Ident(34, 35) "x",
                                    },
                                    typ: Unknown,
                                },
                            ),
                        },
                    ],
                },
            },
        ),
    },
]

