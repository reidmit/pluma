---
source: pluma_parser/tests/parse_success.rs
expression: "def Person . hello (String, Int) world () {\n  |a, b, c| \"wow!\"\n}"
---

=== Source ===
def Person . hello (String, Int) world () {
  |a, b, c| "wow!"
}

=== Comments ===
{}

=== AST ===
Module(0, 64) [
    TopLevelStatement(0, 64) Def(
        DefNode {
            pos: (
                0,
                64,
            ),
            visibility: Public,
            kind: Method {
                receiver: TypeIdentifierNode {
                    pos: (
                        4,
                        10,
                    ),
                    name: "Person",
                    generics: [],
                    constraints: None,
                },
                signature: [
                    (
                        Ident(13, 18) "hello",
                        TypeExprNode {
                            pos: (
                                19,
                                32,
                            ),
                            kind: UnlabeledTuple(
                                [
                                    TypeExprNode {
                                        pos: (
                                            20,
                                            26,
                                        ),
                                        kind: Single(
                                            TypeIdentifierNode {
                                                pos: (
                                                    20,
                                                    26,
                                                ),
                                                name: "String",
                                                generics: [],
                                                constraints: None,
                                            },
                                        ),
                                        typ: Unknown,
                                    },
                                    TypeExprNode {
                                        pos: (
                                            28,
                                            31,
                                        ),
                                        kind: Single(
                                            TypeIdentifierNode {
                                                pos: (
                                                    28,
                                                    31,
                                                ),
                                                name: "Int",
                                                generics: [],
                                                constraints: None,
                                            },
                                        ),
                                        typ: Unknown,
                                    },
                                ],
                            ),
                            typ: Unknown,
                        },
                    ),
                    (
                        Ident(33, 38) "world",
                        TypeExprNode {
                            pos: (
                                39,
                                41,
                            ),
                            kind: EmptyTuple,
                            typ: Unknown,
                        },
                    ),
                ],
            },
            return_type: None,
            generic_type_constraints: [],
            block: Block(42, 64) ([
                Pattern(47, 48) Identifier(Ident(47, 48) "a", false),
                Pattern(50, 51) Identifier(Ident(50, 51) "b", false),
                Pattern(53, 54) Identifier(Ident(53, 54) "c", false),
            ]) [
                Statement(57, 61) Expr(
                    ExprNode {
                        pos: (
                            57,
                            61,
                        ),
                        kind: Literal {
                            literal: Literal(57, 61) Str("wow!"),
                        },
                        typ: Unknown,
                    },
                ),
            ],
        },
    ),
]

