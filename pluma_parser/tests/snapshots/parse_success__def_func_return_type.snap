---
source: pluma_parser/tests/parse_success.rs
expression: "def hello () -> { A -> B } {\n  { |x| y }\n}"
---

=== Source ===
def hello () -> { A -> B } {
  { |x| y }
}

=== Comments ===
{}

=== AST ===
Module(0, 42) [
    TopLevelStatementNode {
        pos: (
            0,
            42,
        ),
        kind: Def(
            DefNode {
                pos: (
                    0,
                    42,
                ),
                visibility: Public,
                kind: Function {
                    signature: [
                        (
                            Ident(4, 9) "hello",
                            TypeExprNode {
                                pos: (
                                    10,
                                    12,
                                ),
                                kind: EmptyTuple,
                                typ: Unknown,
                            },
                        ),
                    ],
                },
                return_type: Some(
                    TypeExprNode {
                        pos: (
                            16,
                            26,
                        ),
                        kind: Func(
                            TypeExprNode {
                                pos: (
                                    18,
                                    19,
                                ),
                                kind: Single(
                                    TypeIdentifierNode {
                                        pos: (
                                            18,
                                            19,
                                        ),
                                        name: "A",
                                        generics: [],
                                        constraints: None,
                                    },
                                ),
                                typ: Unknown,
                            },
                            TypeExprNode {
                                pos: (
                                    23,
                                    24,
                                ),
                                kind: Single(
                                    TypeIdentifierNode {
                                        pos: (
                                            23,
                                            24,
                                        ),
                                        name: "B",
                                        generics: [],
                                        constraints: None,
                                    },
                                ),
                                typ: Unknown,
                            },
                        ),
                        typ: Unknown,
                    },
                ),
                generic_type_constraints: [],
                block: BlockNode {
                    pos: (
                        27,
                        42,
                    ),
                    params: [],
                    body: [
                        StatementNode {
                            pos: (
                                31,
                                40,
                            ),
                            kind: Expr(
                                ExprNode {
                                    pos: (
                                        31,
                                        40,
                                    ),
                                    kind: Block {
                                        block: BlockNode {
                                            pos: (
                                                31,
                                                40,
                                            ),
                                            params: [
                                                PatternNode {
                                                    pos: (
                                                        34,
                                                        35,
                                                    ),
                                                    kind: Identifier(
                                                        Ident(34, 35) "x",
                                                        false,
                                                    ),
                                                },
                                            ],
                                            body: [
                                                StatementNode {
                                                    pos: (
                                                        37,
                                                        38,
                                                    ),
                                                    kind: Expr(
                                                        ExprNode {
                                                            pos: (
                                                                37,
                                                                38,
                                                            ),
                                                            kind: Identifier {
                                                                ident: Ident(37, 38) "y",
                                                            },
                                                            typ: Unknown,
                                                        },
                                                    ),
                                                },
                                            ],
                                        },
                                    },
                                    typ: Unknown,
                                },
                            ),
                        },
                    ],
                },
            },
        ),
    },
]

