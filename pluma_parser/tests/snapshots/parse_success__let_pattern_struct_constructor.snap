---
source: pluma_parser/tests/parse_success.rs
expression: "let Person (name, age) = Person (\"Reid\", 26)"
---

=== Source ===
let Person (name, age) = Person ("Reid", 26)

=== Comments ===
{}

=== AST ===
Module(0, 44) [
    TopLevelStatement(0, 44) Let(
        Let(0, 44) Pattern(4, 22) Constructor(Ident(4, 10) "Person", Pattern(11, 22) UnlabeledTuple([Pattern(12, 16) Identifier(Ident(12, 16) "name", false), Pattern(18, 21) Identifier(Ident(18, 21) "age", false)])) ExprNode {
            pos: (
                25,
                44,
            ),
            kind: Call {
                call: Call {
                    callee: ExprNode {
                        pos: (
                            25,
                            31,
                        ),
                        kind: Identifier {
                            ident: Ident(25, 31) "Person",
                        },
                        typ: Unknown,
                    },
                    args: [
                        ExprNode {
                            pos: (
                                32,
                                44,
                            ),
                            kind: UnlabeledTuple {
                                entries: [
                                    ExprNode {
                                        pos: (
                                            34,
                                            38,
                                        ),
                                        kind: Literal {
                                            literal: Literal(34, 38) Str("Reid"),
                                        },
                                        typ: Unknown,
                                    },
                                    ExprNode {
                                        pos: (
                                            41,
                                            43,
                                        ),
                                        kind: Literal {
                                            literal: Literal(41, 43) IntDecimal(26),
                                        },
                                        typ: Unknown,
                                    },
                                ],
                            },
                            typ: Unknown,
                        },
                    ],
                },
            },
            typ: Unknown,
        },
    ),
]

