---
source: pluma_parser/tests/parse_success.rs
expression: "let b = { $0 + $1 }"
---

=== Source ===
let b = { $0 + $1 }

=== Comments ===
{}

=== AST ===
Module(0, 19) [
    TopLevelStatement(0, 19) Let(
        Let(0, 19) Pattern(4, 5) Identifier(Ident(4, 5) "b", false) ExprNode {
            pos: (
                8,
                19,
            ),
            kind: Block {
                block: Block(8, 19) ([]) [
                    Statement(10, 17) Expr(
                        ExprNode {
                            pos: (
                                10,
                                17,
                            ),
                            kind: BinaryOperation {
                                left: ExprNode {
                                    pos: (
                                        10,
                                        12,
                                    ),
                                    kind: Identifier {
                                        ident: Ident(10, 12) "$0",
                                    },
                                    typ: Unknown,
                                },
                                op: Operator(13, 14) Add,
                                right: ExprNode {
                                    pos: (
                                        15,
                                        17,
                                    ),
                                    kind: Identifier {
                                        ident: Ident(15, 17) "$1",
                                    },
                                    typ: Unknown,
                                },
                            },
                            typ: Unknown,
                        },
                    ),
                ],
            },
            typ: Unknown,
        },
    ),
]

