---
source: pluma_parser/tests/parse_success.rs
expression: "print \"one\"\nprint \"two\""
---

=== Source ===
print "one"
print "two"

=== Comments ===
{}

=== AST ===
Module(0, 22) [
    TopLevelStatementNode {
        pos: (
            0,
            10,
        ),
        kind: Expr(
            ExprNode {
                pos: (
                    0,
                    10,
                ),
                kind: Call {
                    call: CallNode {
                        pos: (
                            0,
                            10,
                        ),
                        callee: ExprNode {
                            pos: (
                                0,
                                5,
                            ),
                            kind: Identifier {
                                ident: Ident(0, 5) "print",
                            },
                            typ: Unknown,
                        },
                        args: [
                            ExprNode {
                                pos: (
                                    7,
                                    10,
                                ),
                                kind: Literal {
                                    literal: LiteralNode {
                                        pos: (
                                            7,
                                            10,
                                        ),
                                        kind: Str(
                                            "one",
                                        ),
                                    },
                                },
                                typ: Unknown,
                            },
                        ],
                        typ: Unknown,
                    },
                },
                typ: Unknown,
            },
        ),
    },
    TopLevelStatementNode {
        pos: (
            12,
            22,
        ),
        kind: Expr(
            ExprNode {
                pos: (
                    12,
                    22,
                ),
                kind: Call {
                    call: CallNode {
                        pos: (
                            12,
                            22,
                        ),
                        callee: ExprNode {
                            pos: (
                                12,
                                17,
                            ),
                            kind: Identifier {
                                ident: Ident(12, 17) "print",
                            },
                            typ: Unknown,
                        },
                        args: [
                            ExprNode {
                                pos: (
                                    19,
                                    22,
                                ),
                                kind: Literal {
                                    literal: LiteralNode {
                                        pos: (
                                            19,
                                            22,
                                        ),
                                        kind: Str(
                                            "two",
                                        ),
                                    },
                                },
                                typ: Unknown,
                            },
                        ],
                        typ: Unknown,
                    },
                },
                typ: Unknown,
            },
        ),
    },
]

