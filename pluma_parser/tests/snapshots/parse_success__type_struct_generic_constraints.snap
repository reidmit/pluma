---
source: pluma_parser/tests/parse_success.rs
expression: "struct Thing<A, B> where A :: Any, B :: Comparable (\n  first : A,\n  second : B,\n  third : Int\n)"
---

=== Source ===
struct Thing<A, B> where A :: Any, B :: Comparable (
  first : A,
  second : B,
  third : Int
)

=== Comments ===
{}

=== AST ===
Module(0, 95) [
    TopLevelStatement(0, 95) TypeDef(
        TypeDefNode {
            pos: (
                0,
                95,
            ),
            visibility: Public,
            kind: Struct {
                inner: TypeExprNode {
                    pos: (
                        51,
                        95,
                    ),
                    kind: LabeledTuple(
                        [
                            (
                                Ident(55, 60) "first",
                                TypeExprNode {
                                    pos: (
                                        63,
                                        64,
                                    ),
                                    kind: Single(
                                        TypeIdentifierNode {
                                            pos: (
                                                63,
                                                64,
                                            ),
                                            name: "A",
                                            generics: [],
                                            constraints: None,
                                        },
                                    ),
                                    typ: Unknown,
                                },
                            ),
                            (
                                Ident(68, 74) "second",
                                TypeExprNode {
                                    pos: (
                                        77,
                                        78,
                                    ),
                                    kind: Single(
                                        TypeIdentifierNode {
                                            pos: (
                                                77,
                                                78,
                                            ),
                                            name: "B",
                                            generics: [],
                                            constraints: None,
                                        },
                                    ),
                                    typ: Unknown,
                                },
                            ),
                            (
                                Ident(82, 87) "third",
                                TypeExprNode {
                                    pos: (
                                        90,
                                        93,
                                    ),
                                    kind: Single(
                                        TypeIdentifierNode {
                                            pos: (
                                                90,
                                                93,
                                            ),
                                            name: "Int",
                                            generics: [],
                                            constraints: None,
                                        },
                                    ),
                                    typ: Unknown,
                                },
                            ),
                        ],
                    ),
                    typ: Unknown,
                },
            },
            name: TypeIdentifierNode {
                pos: (
                    7,
                    18,
                ),
                name: "Thing",
                generics: [
                    TypeExprNode {
                        pos: (
                            13,
                            14,
                        ),
                        kind: Single(
                            TypeIdentifierNode {
                                pos: (
                                    13,
                                    14,
                                ),
                                name: "A",
                                generics: [],
                                constraints: None,
                            },
                        ),
                        typ: Unknown,
                    },
                    TypeExprNode {
                        pos: (
                            16,
                            17,
                        ),
                        kind: Single(
                            TypeIdentifierNode {
                                pos: (
                                    16,
                                    17,
                                ),
                                name: "B",
                                generics: [],
                                constraints: None,
                            },
                        ),
                        typ: Unknown,
                    },
                ],
                constraints: None,
            },
            generic_type_constraints: [
                (
                    Ident(25, 26) "A",
                    TypeIdentifierNode {
                        pos: (
                            30,
                            33,
                        ),
                        name: "Any",
                        generics: [],
                        constraints: None,
                    },
                ),
                (
                    Ident(35, 36) "B",
                    TypeIdentifierNode {
                        pos: (
                            40,
                            50,
                        ),
                        name: "Comparable",
                        generics: [],
                        constraints: None,
                    },
                ),
            ],
        },
    ),
]

